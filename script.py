# -*- coding: utf-8 -*-
"""TSC_with_DTW.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17eiGlek4rdbTuhnJemomDnkQj7pFyE6O
"""


import numpy as np 
import pandas as pd
import time
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix, accuracy_score
from dtw import DTW
from one_nn import OneNN

train = pd.read_csv('datasets/ECG200/ECG200_TRAIN.tsv', 
                   header=None,
                   sep='\t')

test = pd.read_csv('datasets/ECG200/ECG200_TEST.tsv', 
                   header=None,
                   sep='\t')

print('Training set', train.shape)
print('Testing set', test.shape)

train.head() 
# first column is the label
# each row is time series

X_train = train.iloc[:, 1:]
y_train = train.iloc[:, 0]
X_test = test.iloc[:, 1:]
y_test = test.iloc[:, 0]

"""### Visualizing with DTW"""

print('The series have different labels')
DTW(X_train.iloc[0, :], X_train.iloc[1, :]).plot()
print('The series have the same labels')
DTW(X_train.iloc[0, :], X_train.iloc[2, :]).plot()

"""### Time Series Classification with DTW"""

model = OneNN()
model.fit(X_train, y_train)

# make prediction for the first series 
# in the test set
# number of series to classify from the test set
nr_series = 20 
start = time.perf_counter()
prediction = model.predict(X_test[:nr_series])
time_taken = time.perf_counter() - start
actual = y_test[:nr_series].values
accuracy = accuracy_score(actual, prediction)
print('Took {0:.2f} sec'.format(time_taken))
print('Confusion matrix')
print(confusion_matrix(actual, prediction))
print('Accuracy {}'.format(accuracy))

"""Although the results are promising, the model consumes too much time to classify only 20 time series!"""

# make prediction for the first series 
# in the test set

start = time.perf_counter()
prediction = model.predict(X_test)
time_taken = time.perf_counter() - start
actual = y_test.values
accuracy = accuracy_score(actual, prediction)
print('Took {0:.2f} sec'.format(time_taken))
print('Confusion matrix')
print(confusion_matrix(actual, prediction))
print('Accuracy {}'.format(accuracy))
